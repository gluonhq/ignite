/*
 * Copyright (c) 2020, Gluon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: 'signing'

configurations {
    samples { extendsFrom runtime}
    jdk
    maven { extendsFrom archives }
    published { extendsFrom archives, signatures}
}

signing {
    required = { gradle.taskGraph.hasTask(uploadPublished) && !version.endsWith("SNAPSHOT") }
    sign configurations.archives
}

repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/groups/staging' }
    mavenCentral()
}

uploadPublished {

    doFirst {
        // configure repositories in a doFirst so we can late bind the properties
        checkPasswords()
        repositories {
            mavenDeployer {
                configurePOM(pom)
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication userName: sonatypeUsername, password: sonatypePassword
                }
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication userName: sonatypeUsername, password: sonatypePassword
                }
            }
        }
    }
    configuration = configurations.published
}

install {
    doFirst {
        configurePOM(repositories.mavenInstaller.pom)
    }
    configuration = configurations.published
}

private configurePOM(def pom) {
    pom.project {
        name "Gluon Ignite ${project.name.capitalize()}"
        description project.ext.description
        url 'http://gluonhq.com/open-source/ignite/'
        modelVersion '4.0.0'
        packaging 'jar'
        scm {
            connection 'scm:hg:https://bitbucket.org/gluon-oss/ignite'
            developerConnection 'scm:hg:https://bitbucket.org/gluon-oss/ignite'
            url 'https://bitbucket.org/gluon-oss/ignite'
        }
        developers {
            developer {
                name 'Eugene Ryzhikov'
                email 'eugene.ryzhikov@gluonhq.com'
                roles {
                    role 'author'
                    role 'developer'
                }
            }
            developer {
                name 'Johan Vos'
                email 'johan.vos@gluonhq.com'
                roles {
                    role 'author'
                    role 'developer'
                }
            }
            developer {
                name 'Joeri Sykora'
                email 'joeri.sykora@gluonhq.com'
                roles {
                    role 'author'
                    role 'developer'
                }
            }
            developer {
                name 'Erwin Morrhey'
                email 'erwin.morrhey@gluonhq.com'
                roles {
                    role 'author'
                    role 'developer'
                }
            }
        }
        licenses {
            license {
                name 'The 3-Clause BSD License'
                url 'http://www.opensource.org/licenses/bsd-license.php'
                distribution 'repo'
            }
        }
    }
    // Remove JavaFX dependencies
    pom.withXml {
        def root = asNode()
        root.dependencies.'*'
                .findAll() { it.groupId.text() == 'org.openjfx' }
                .each { it.parent().remove(it) }
    }
}

ext.checkPasswords =  {
    try {
        def check = [sonatypeUsername, sonatypePassword]
        println "Using sonatype user $sonatypeUsername"
    } catch (MissingPropertyException e) {
        e.printStackTrace()
        Console console = System.console()
        console.printf "\n\nIn order to upload to Sonatype we need your username and password.\nEnter a blank username or password to skip upload\n\n"
        ext.sonatypeUsername = console.readLine("Sonatype Username: ")
        ext.sonatypePassword = new String(console.readPassword("Sonatype Password: "))
        if (!sonatypePassword || !sonatypeUsername) {
            console.printf("\n\nSonatype upload aborted")
            subprojects {
                signing {
                    enabled = false
                }
                uploadPublished {
                    enabled = false
                }
            }
            throw new StopExecutionException()
        }
    }
}

